# Sample workflow for building and deploying a Hugo site to GitHub Pages
name: content

on:
  workflow_call:
  pull_request:
    paths-ignore:
      - "README.md"
    branches:
      - main
  push:
    paths-ignore:
      - "README.md"
    branches:
      - main

  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ubuntu-latest
    continue-on-error: false
    steps:
      - name: Debug
        uses: hmarr/debug-action@v2
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: 'latest'
          extended: true
      - name: Install Dart Sass Embedded
        run: sudo snap install dart-sass-embedded
      - name: Checkout Template Theme
        uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.event.pull_request.head.ref }}
      - name: Checkout Content fortinet-forticnp
        uses: actions/checkout@v3
        with:
          path: content/fortinet-forticnp
          repository: robinmordasiewicz/fortinet-forticnp
          fetch-depth: 0
      - name: Checkout Content fortinet-secure-cloud-blueprint
        uses: actions/checkout@v3
        with:
          path: content/fortinet-secure-cloud-blueprint
          repository: robinmordasiewicz/fortinet-secure-cloud-blueprint
          fetch-depth: 0
      - name: Get all changed .ssml
        id: fortinet-forticnp
        uses: tj-actions/changed-files@v36
        with:
          path: ./content/fortinet-forticnp
          separator: ","
          files: |
            **.ssml
      - name: Get all changed .ssml
        id: fortinet-secure-cloud-blueprint
        uses: tj-actions/changed-files@v36
        with:
          path: ./content/fortinet-secure-cloud-blueprint
          separator: ","
          files: |
            **.ssml
      - name: display
        working-directory: ./content/fortinet-forticnp
        if: steps.fortinet-forticnp.outputs.any_changed == 'true'
        run: |
          IFS="," read -a myarray <<< ${{ steps.fortinet-forticnp.outputs.all_changed_files }}
          for i in "${myarray[@]}"; do
            echo "Value: ${i}"
            echo "Value: ${i%.*}"
          done
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v3
        with:
          name: content
          path: content/
      - name: gcloud auth
        id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          token_format: 'access_token'
          workload_identity_provider: '${{ vars.WORKLOAD_IDENTITY_PROVIDER }}'
          service_account: '${{ vars.SERVICE_ACCOUNT }}'
      - name: convert .ssml to .wav fortinet-secure-cloud-blueprint
        if: steps.fortinet-secure-cloud-blueprint.outputs.any_changed == 'true'
        working-directory: ./content/fortinet-secure-cloud-blueprint
        run: |
          IFS="," read -a myarray <<< ${{ steps.fortinet-secure-cloud-blueprint.outputs.all_changed_files }}
          for i in "${myarray[@]}"; do
            echo "Value: ${i}"
            echo "Value: ${i%.*}"
            sed -e "/INSERTSSML/r ${i%.*}.ssml" -e "/INSERTSSML/d" ../../text-to-speech.json > ${i%.*}.json
            curl -H "Authorization: Bearer $(gcloud auth application-default print-access-token)" \
                 -H "Content-Type: application/json; charset=utf-8" \
                 -d @${i%.*}.json \
                 "https://texttospeech.googleapis.com/v1/text:synthesize" > ${i%.*}.raw
            cat ${i%.*}.raw | grep 'audioContent' | sed 's|audioContent| |' | tr -d '\n ":{},' > tmp.txt
            base64 -i tmp.txt --decode > ${i%.*}.wav
            rm ${i%.*}.raw tmp.txt ${i%.*}.json
          done
      - name: convert .ssml to .wav fortinet-forticnp
        if: steps.fortinet-forticnp.outputs.any_changed == 'true'
        working-directory: ./content/fortinet-forticnp
        run: |
          IFS="," read -a myarray <<< ${{ steps.fortinet-forticnp.outputs.all_changed_files }}
          for i in "${myarray[@]}"; do
            echo "Value: ${i}"
            echo "Value: ${i%.*}"
            sed -e "/INSERTSSML/r ${i%.*}.ssml" -e "/INSERTSSML/d" ../../text-to-speech.json > ${i%.*}.json
            curl -H "Authorization: Bearer $(gcloud auth application-default print-access-token)" \
                 -H "Content-Type: application/json; charset=utf-8" \
                 -d @${i%.*}.json \
                 "https://texttospeech.googleapis.com/v1/text:synthesize" > ${i%.*}.raw
            cat ${i%.*}.raw | grep 'audioContent' | sed 's|audioContent| |' | tr -d '\n ":{},' > tmp.txt
            base64 -i tmp.txt --decode > ${i%.*}.wav
            rm ${i%.*}.raw tmp.txt ${i%.*}.json
          done
      - name: Missing wav files
        working-directory: ./content
        run: |
          shopt -s globstar
          for i in **/*.ssml; do
            echo "Value: ${i}"
            echo "Value: ${i%.*}"
            if [[ -f ${i%.*}.ssml  &&  ! -f ${i%.*}.wav ]]; then
              sed -e "/INSERTSSML/r ${i%.*}.ssml" -e "/INSERTSSML/d" ../../text-to-speech.json > ${i%.*}.json
              curl -H "Authorization: Bearer $(gcloud auth application-default print-access-token)" \
                   -H "Content-Type: application/json; charset=utf-8" \
                   -d @${i%.*}.json \
                   "https://texttospeech.googleapis.com/v1/text:synthesize" > ${i%.*}.raw
              cat ${i%.*}.raw | grep 'audioContent' | sed 's|audioContent| |' | tr -d '\n ":{},' > tmp.txt
              base64 -i tmp.txt --decode > ${i%.*}.wav
              rm ${i%.*}.raw tmp.txt ${i%.*}.json
            fi
          done
      - name: Setup FFmpeg
        uses: FedericoCarboni/setup-ffmpeg@v2
      - name: convert .mov to webm
        working-directory: ./content
        run: |
          shopt -s globstar
          for i in **/*.mov; do
            echo "Value: ${i}"
            echo "Value: ${i%.*}"
            ffmpeg -y -i ${i} -filter:v fps=10 tmpout.mov
            #ffmpeg -y -i tmpout.mov -filter_complex "[0]pad=w=4+iw:h=4+ih:x=2:y=2:color=black" tmpout2.mov && mv tmpout2.mov tmpout.mov
            [[ -f ${i%.*}.wav ]] && ffmpeg -y -i tmpout.mov -i ${i%.*}.wav -c:v copy -c:a aac tmpout2.mov && mv tmpout2.mov tmpout.mov
            ffmpeg -y -i tmpout.mov -vf scale=1920:-1 -b:v 0 -crf 43 -pass 1 -an -f webm -y /dev/null
            ffmpeg -y -i tmpout.mov -vf scale=1920:-1 -b:v 0 -crf 43 -pass 2  "${i%.*}.webm"
            rm tmpout.mov
          done
      - name: Archive webm wav artifacts
        uses: actions/upload-artifact@v3
        with:
          name: content
          path: |
            content/**/*.webm
            content/**/*.wav
      - name: Setup Github Pages
        id: pages
        uses: actions/configure-pages@v3
      - name: Install Node.js dependencies
        run: "[[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true"
      - name: Cache Hugo
        uses: actions/cache@v3
        with:
          path: /tmp/hugo_cache
          key: ${{ runner.os }}-hugomod-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-hugomod-
      - name: Build with Hugo
        env:
          # For maximum backward compatibility with Hugo modules
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
        run: |
          hugo \
            --gc \
            --minify \
            --baseURL "${{ github.event.repository.homepage }}/"
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: ./public

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
