# Sample workflow for building and deploying a Hugo site to GitHub Pages
name: content

on:
  workflow_call:
  pull_request:
    paths-ignore:
      - "README.md"
    branches:
      - main
  push:
    paths-ignore:
      - "README.md"
    branches:
      - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: true

# Default to bash
defaults:
  run:
    shell: bash

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    env:
      HUGO_VERSION: 0.113.0
    steps:
      - name: Debug
        uses: hmarr/debug-action@v2
      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb          
      - name: Install Dart Sass Embedded
        run: sudo snap install dart-sass-embedded
      - name: Checkout Template Theme
        uses: actions/checkout@v3
        with:
          repository: robinmordasiewicz/fortinet-hugo-theme
          submodules: recursive
          fetch-depth: 0
      - name: Checkout Content
        uses: actions/checkout@v3
        with:
          path: content
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.event.pull_request.head.ref }}
      - name: Copy Site Config
        run: cp content/config.toml config/_default/hugo.toml
      - name: Copy Discussion Config
        run: cp content/params.toml config/_default/params.toml
      - name: Get all changed .ssml
        id: changed-ssml-files
        uses: tj-actions/changed-files@v36
        with:
          path: ./content
          separator: ","
          files: |
            **.ssml

      - name: 'Set up Cloud SDK'
        if: steps.changed-ssml-files.outputs.any_changed == 'true'
        uses: 'google-github-actions/setup-gcloud@v1'
        with:
          version: '>= 363.0.0'
      - name: gcloud auth
        if: steps.changed-ssml-files.outputs.any_changed == 'true'
        id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: '${{ vars.WORKLOAD_IDENTITY_PROVIDER }}'
          service_account: '${{ vars.SERVICE_ACCOUNT }}'
      - name: 'Use gcloud CLI'
        if: steps.changed-ssml-files.outputs.any_changed == 'true'
        run: 'gcloud info'

      - name: convert .ssml to .wav
        working-directory: ./content
        if: steps.changed-ssml-files.outputs.any_changed == 'true'
        run: |
          IFS="," read -a myarray <<< ${{ steps.changed-ssml-files.outputs.all_changed_files }}
          for i in "${myarray[@]}"; do
            echo ""
            echo "Value: ${i}"
            echo "Value: ${i%.*}"
            sed -e "/INSERTSSML/r ${i%.*}.ssml" -e "/INSERTSSML/d" ../text-to-speech.json > ${i%.*}.json
            curl -H "Authorization: Bearer $(gcloud auth application-default print-access-token)" \
                 -H "Content-Type: application/json; charset=utf-8" \
                 -d @${i%.*}.json \
                 "https://texttospeech.googleapis.com/v1/text:synthesize" > ${i%.*}.raw
            cat ${i%.*}.raw | grep 'audioContent' | \
            sed 's|audioContent| |' | tr -d '\n ":{},' > tmp.txt && \
            base64 -i tmp.txt --decode > ${i%.*}.wav && \
            rm tmp.txt ${i%.*}.json
            if [[ -f "${i%.*}.wav" ]]; then
              git rm "${i%.*}.wav"
              git commit -m 'updates' && git push origin main
            fi
            git add -f "${i%.*}.wav"
          done

      - name: Get all changed .mov
        id: changed-files-specific
        uses: tj-actions/changed-files@v36
        with:
          path: ./content
          separator: ","
          files: |
            **.mov
      - name: Setup FFmpeg
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        uses: FedericoCarboni/setup-ffmpeg@v2
#      - name: Install gifski
#        if: steps.changed-files-specific.outputs.any_changed == 'true'
#        run: curl -sLO https://github.com/ImageOptim/gifski/releases/download/1.11.0/gifski_1.11.0_amd64.deb && sudo apt-get update && sudo apt install ./gifski_1.11.0_amd64.deb && rm gifski_1.11.0_amd64.deb
      - name: convert .mov to .gif
        working-directory: ./content
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        run: |
          IFS="," read -a myarray <<< ${{ steps.changed-files-specific.outputs.all_changed_files }}
          for i in "${myarray[@]}"; do
            echo ""
            echo "Value: ${i}"
            echo "Value: ${i%.*}"
            ffmpeg -y -i ${i} -filter:v fps=10 tmpout.mov
            ffmpeg -y -i tmpout.mov -filter_complex "[0]pad=w=4+iw:h=4+ih:x=2:y=2:color=black" tmpout2.mov
            rm tmpout.mov
            [[ -f ${i%.*}.wav ]] && ffmpeg -y -i tmpout2.mov  -i ${i%.*}.wav -c:v copy -c:a aac tmpout3.mov && mv tmpout3.mov tmpout2.mov
            if [[ -f "${i%.*}.webm" ]]; then
              git rm "${i%.*}.webm"
              git commit -m 'updates' && git push origin main
            fi
            ffmpeg -i tmpout2.mov -vf scale=1920:-1 -b:v 0 -crf 43 -pass 1 -an -f webm -y /dev/null
            ffmpeg -i tmpout2.mov -vf scale=1920:-1 -b:v 0 -crf 43 -pass 2  "${i%.*}.webm"
            git add -f "${i%.*}.webm"
            #mkdir tmp
            #ffmpeg -i tmpout2.mov tmp/frame%04d.png
            rm tmpout2.mov
            #if [[ -f "${i%.*}.gif" ]]; then
            #  git config user.name "GitHub Actions Bot"
            #  git config user.email "<>"
            #  git rm "${i%.*}.gif"
            #  git commit -m 'updates' && git push origin main
            #fi
            #gifski --fps 10 --width 960 --repeat -1 -o ${i%.*}.gif tmp/frame*.png
            #git add -f "${i%.*}.gif"
            #rm -rf tmp/
          done
      - name: Commit new gif
        working-directory: ./content
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
          git diff-index --quiet HEAD || git commit -m 'updates' && git push origin main
      - name: Setup Github Pages
        id: pages
        uses: actions/configure-pages@v3
      - name: Install Node.js dependencies
        run: "[[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true"
      - name: Build with Hugo
        env:
          # For maximum backward compatibility with Hugo modules
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
        run: |
          hugo \
            --gc \
            --minify \
            --baseURL "${{ github.event.repository.homepage }}/"
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: ./public

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
